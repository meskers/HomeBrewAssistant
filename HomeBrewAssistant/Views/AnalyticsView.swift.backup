import SwiftUI
import CoreData
import Charts

struct AnalyticsView: View {
    @Environment(\.managedObjectContext) private var viewContext
    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \DetailedRecipeModel.createdAt, ascending: false)],
        animation: .default
    ) private var recipes: FetchedResults<DetailedRecipeModel>
    
    @StateObject private var brewAnalytics = BrewAnalytics.shared
    
    @State private var selectedTimeframe: AnalyticsTimeframe = .month
    @State private var selectedMetric: AnalyticsMetric = .overview
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // Header with Quick Stats
                    analyticsHeader
                    
                    // Timeframe Selector
                    timeframePicker
                    
                    // Main Content Tabs
                    TabView(selection: $selectedMetric) {
                        overviewTab
                            .tag(AnalyticsMetric.overview)
                        
                        brewingProgressTab
                            .tag(AnalyticsMetric.brewing)
                        
                        recipeAnalysisTab
                            .tag(AnalyticsMetric.recipes)
                        
                        ingredientInsightsTab
                            .tag(AnalyticsMetric.ingredients)
                    }
                    .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never))
                    .frame(height: 500)
                    
                    // Metric Navigation
                    metricNavigationBar
                }
                .padding()
            }
            .navigationTitle("📊 Analytics")
            .navigationBarTitleDisplayMode(.large)
        }
    }
    
    // MARK: - Header Section
    
    private var analyticsHeader: some View {
        VStack(spacing: 16) {
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text("Brouw Statistieken")
                        .font(.title2)
                        .fontWeight(.bold)
                    Text("\(selectedTimeframe.description)")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                HStack(spacing: 16) {
                    quickStatCard(
                        title: "Recepten",
                        value: "\(filteredRecipes.count)",
                        icon: "book.fill",
                        color: .blue
                    )
                    
                    quickStatCard(
                        title: "Brouwsels",
                        value: "\(filteredBrewSessions.count)",
                        icon: "drop.circle.fill",
                        color: .orange
                    )
                }
            }
        }
        .padding()
        .background(Color(.systemGray6))
        .cornerRadius(12)
    }
    
    private func quickStatCard(title: String, value: String, icon: String, color: Color) -> some View {
        VStack(spacing: 4) {
            HStack(spacing: 4) {
                Image(systemName: icon)
                    .foregroundColor(color)
                    .font(.caption)
                Text(value)
                    .font(.headline)
                    .fontWeight(.bold)
            }
            Text(title)
                .font(.caption2)
                .foregroundColor(.secondary)
        }
    }
    
    // MARK: - Timeframe Picker
    
    private var timeframePicker: some View {
        Picker("Timeframe", selection: $selectedTimeframe) {
            ForEach(AnalyticsTimeframe.allCases, id: \.self) { timeframe in
                Text(timeframe.displayName).tag(timeframe)
            }
        }
        .pickerStyle(SegmentedPickerStyle())
    }
    
    // MARK: - Overview Tab
    
    private var overviewTab: some View {
        VStack(spacing: 20) {
            // Brewing Activity Chart
            brewingActivityChart
            
            // Recent Activity
            recentActivitySection
        }
    }
    
    private var brewingActivityChart: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Brouw Activiteit")
                .font(.headline)
                .padding(.horizontal)
            
            if #available(iOS 16.0, *) {
                Chart(brewingActivityData) { dataPoint in
                    LineMark(
                        x: .value("Datum", dataPoint.date),
                        y: .value("Aantal", dataPoint.count)
                    )
                    .foregroundStyle(Color.brewTheme)
                    .interpolationMethod(.catmullRom)
                    
                    PointMark(
                        x: .value("Datum", dataPoint.date),
                        y: .value("Aantal", dataPoint.count)
                    )
                    .foregroundStyle(Color.brewTheme)
                }
                .frame(height: 200)
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(12)
                .shadow(radius: 2)
            } else {
                // Fallback for iOS < 16
                simpleActivityChart
            }
        }
    }
    
    private var simpleActivityChart: some View {
        VStack(spacing: 8) {
            ForEach(Array(brewingActivityData.enumerated()), id: \.offset) { index, dataPoint in
                HStack {
                    Text(DateFormatter.monthDay.string(from: dataPoint.date))
                        .font(.caption)
                        .frame(width: 40, alignment: .leading)
                    
                    ZStack(alignment: .leading) {
                        Rectangle()
                            .fill(Color(.systemGray5))
                            .frame(height: 20)
                        
                        Rectangle()
                            .fill(Color.brewTheme)
                            .frame(width: CGFloat(dataPoint.count) * 20, height: 20)
                    }
                    .cornerRadius(4)
                    
                    Text("\(dataPoint.count)")
                        .font(.caption)
                        .fontWeight(.medium)
                        .frame(width: 30, alignment: .trailing)
                }
            }
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(12)
        .shadow(radius: 2)
    }
    
    private var recentActivitySection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Recente Activiteit")
                .font(.headline)
                .padding(.horizontal)
            
            LazyVStack(spacing: 8) {
                ForEach(Array(recentActivities.prefix(5)), id: \.id) { activity in
                    activityRow(activity)
                }
            }
            .padding()
            .background(Color(.systemBackground))
            .cornerRadius(12)
            .shadow(radius: 2)
        }
    }
    
    private func activityRow(_ activity: ActivityItem) -> some View {
        HStack(spacing: 12) {
            Image(systemName: activity.icon)
                .foregroundColor(activity.color)
                .frame(width: 24, height: 24)
            
            VStack(alignment: .leading, spacing: 2) {
                Text(activity.title)
                    .font(.subheadline)
                    .fontWeight(.medium)
                Text(activity.subtitle)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            Text(DateFormatter.relative.string(from: activity.date))
                .font(.caption2)
                .foregroundColor(.secondary)
        }
        .padding(.vertical, 4)
    }
    
    // MARK: - Brewing Progress Tab
    
    private var brewingProgressTab: some View {
        VStack(spacing: 20) {
            // Success Rate
            brewingSuccessRate
            
            // Average Brew Time
            averageBrewTime
            
            // Completion Stages
            brewingStagesChart
        }
    }
    
    private var brewingSuccessRate: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Succes Ratio")
                .font(.headline)
                .padding(.horizontal)
            
            HStack(spacing: 20) {
                // Success Rate Circle
                ZStack {
                    Circle()
                        .stroke(Color(.systemGray5), lineWidth: 8)
                        .frame(width: 100, height: 100)
                    
                    Circle()
                        .trim(from: 0, to: successRate)
                        .stroke(Color.green, style: StrokeStyle(lineWidth: 8, lineCap: .round))
                        .frame(width: 100, height: 100)
                        .rotationEffect(.degrees(-90))
                        .animation(.easeInOut(duration: 1), value: successRate)
                    
                    VStack {
                        Text("\(Int(successRate * 100))%")
                            .font(.title2)
                            .fontWeight(.bold)
                        Text("Geslaagd")
                            .font(.caption2)
                            .foregroundColor(.secondary)
                    }
                }
                
                VStack(alignment: .leading, spacing: 8) {
                    brewStatRow("Voltooid", "\(completedBrews)", .green)
                    brewStatRow("In Uitvoering", "\(activeBrews)", .orange)
                    brewStatRow("Mislukt", "\(failedBrews)", .red)
                }
                
                Spacer()
            }
            .padding()
            .background(Color(.systemBackground))
            .cornerRadius(12)
            .shadow(radius: 2)
        }
    }
    
    private func brewStatRow(_ label: String, _ value: String, _ color: Color) -> some View {
        HStack {
            Circle()
                .fill(color)
                .frame(width: 8, height: 8)
            Text(label)
                .font(.caption)
            Spacer()
            Text(value)
                .font(.caption)
                .fontWeight(.medium)
        }
    }
    
    private var averageBrewTime: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Gemiddelde Brouwtijd")
                .font(.headline)
                .padding(.horizontal)
            
            HStack(spacing: 20) {
                VStack {
                    Text("\(averageBrewDays)")
                        .font(.title)
                        .fontWeight(.bold)
                        .foregroundColor(.brewTheme)
                    Text("Dagen")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                Divider()
                    .frame(height: 40)
                
                VStack(alignment: .leading, spacing: 4) {
                    Text("Primaire Fermentatie: \(averagePrimaryDays) dagen")
                        .font(.caption)
                    Text("Secundaire Fermentatie: \(averageSecondaryDays) dagen")
                        .font(.caption)
                    Text("Rijping: \(averageConditioningDays) dagen")
                        .font(.caption)
                }
                .foregroundColor(.secondary)
                
                Spacer()
            }
            .padding()
            .background(Color(.systemBackground))
            .cornerRadius(12)
            .shadow(radius: 2)
        }
    }
    
    private var brewingStagesChart: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Brouw Fases")
                .font(.headline)
                .padding(.horizontal)
            
            if #available(iOS 16.0, *) {
                Chart(brewingStagesData) { stage in
                    BarMark(
                        x: .value("Stage", stage.name),
                        y: .value("Count", stage.count)
                    )
                    .foregroundStyle(Color.brewTheme)
                }
                .frame(height: 200)
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(12)
                .shadow(radius: 2)
            } else {
                // Fallback bar chart
                VStack(spacing: 8) {
                    ForEach(brewingStagesData, id: \.name) { stage in
                        HStack {
                            Text(stage.name)
                                .font(.caption)
                                .frame(width: 80, alignment: .leading)
                            
                            ZStack(alignment: .leading) {
                                Rectangle()
                                    .fill(Color(.systemGray5))
                                    .frame(height: 20)
                                
                                Rectangle()
                                    .fill(Color.brewTheme)
                                    .frame(width: CGFloat(stage.count) * 15, height: 20)
                            }
                            .cornerRadius(4)
                            
                            Text("\(stage.count)")
                                .font(.caption)
                                .fontWeight(.medium)
                                .frame(width: 30, alignment: .trailing)
                        }
                    }
                }
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(12)
                .shadow(radius: 2)
            }
        }
    }
    
    // MARK: - Recipe Analysis Tab
    
    private var recipeAnalysisTab: some View {
        VStack(spacing: 20) {
            // Recipe Types Distribution
            recipeTypesChart
            
            // Complexity Analysis
            complexityAnalysis
            
            // ABV Distribution
            abvDistribution
        }
    }
    
    private var recipeTypesChart: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Recept Types")
                .font(.headline)
                .padding(.horizontal)
            
            if #available(iOS 16.0, *) {
                Chart(recipeTypesData) { type in
                    SectorMark(
                        angle: .value("Count", type.count),
                        innerRadius: .ratio(0.5),
                        angularInset: 2
                    )
                    .foregroundStyle(by: .value("Type", type.name))
                    .opacity(0.8)
                }
                .frame(height: 200)
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(12)
                .shadow(radius: 2)
            } else {
                // Fallback pie chart representation
                VStack(spacing: 8) {
                    ForEach(recipeTypesData, id: \.name) { type in
                        HStack {
                            Circle()
                                .fill(colorForRecipeType(type.name))
                                .frame(width: 12, height: 12)
                            
                            Text(type.name)
                                .font(.caption)
                                .frame(width: 60, alignment: .leading)
                            
                            Text("\(type.count)")
                                .font(.caption)
                                .fontWeight(.medium)
                            
                            Spacer()
                            
                            Text("\(Int(Double(type.count) / Double(filteredRecipes.count) * 100))%")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    }
                }
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(12)
                .shadow(radius: 2)
            }
        }
    }
    
    private var complexityAnalysis: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Complexiteit Analyse")
                .font(.headline)
                .padding(.horizontal)
            
            HStack(spacing: 20) {
                ForEach(complexityData, id: \.level) { complexity in
                    VStack {
                        Text("\(complexity.count)")
                            .font(.title2)
                            .fontWeight(.bold)
                            .foregroundColor(complexity.color)
                        
                        Text(complexity.level)
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        Rectangle()
                            .fill(complexity.color)
                            .frame(width: 4, height: 20)
                    }
                }
            }
            .padding()
            .background(Color(.systemBackground))
            .cornerRadius(12)
            .shadow(radius: 2)
        }
    }
    
    private var abvDistribution: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("ABV Verdeling")
                .font(.headline)
                .padding(.horizontal)
            
            if #available(iOS 16.0, *) {
                Chart(abvDistributionData) { range in
                    BarMark(
                        x: .value("ABV Range", range.label),
                        y: .value("Count", range.count)
                    )
                    .foregroundStyle(Color.brewTheme.gradient)
                }
                .frame(height: 150)
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(12)
                .shadow(radius: 2)
            } else {
                VStack(spacing: 8) {
                    ForEach(abvDistributionData, id: \.label) { range in
                        HStack {
                            Text(range.label)
                                .font(.caption)
                                .frame(width: 60, alignment: .leading)
                            
                            ZStack(alignment: .leading) {
                                Rectangle()
                                    .fill(Color(.systemGray5))
                                    .frame(height: 16)
                                
                                Rectangle()
                                    .fill(Color.brewTheme)
                                    .frame(width: CGFloat(range.count) * 20, height: 16)
                            }
                            .cornerRadius(4)
                            
                            Text("\(range.count)")
                                .font(.caption)
                                .fontWeight(.medium)
                                .frame(width: 30, alignment: .trailing)
                        }
                    }
                }
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(12)
                .shadow(radius: 2)
            }
        }
    }
    
    // MARK: - Ingredient Insights Tab
    
    private var ingredientInsightsTab: some View {
        VStack(spacing: 20) {
            // Most Used Ingredients
            mostUsedIngredients
            
            // Ingredient Categories
            ingredientCategoriesChart
            
            // Seasonal Patterns
            seasonalIngredients
        }
    }
    
    private var mostUsedIngredients: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Meest Gebruikte Ingrediënten")
                .font(.headline)
                .padding(.horizontal)
            
            LazyVStack(spacing: 8) {
                ForEach(Array(topIngredients.prefix(5)), id: \.name) { ingredient in
                    HStack {
                        Text(ingredient.name)
                            .font(.subheadline)
                        
                        Spacer()
                        
                        Text("\(ingredient.usage)x")
                            .font(.caption)
                            .fontWeight(.medium)
                            .foregroundColor(.brewTheme)
                    }
                    .padding(.vertical, 4)
                }
            }
            .padding()
            .background(Color(.systemBackground))
            .cornerRadius(12)
            .shadow(radius: 2)
        }
    }
    
    private var ingredientCategoriesChart: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Ingrediënt Categorieën")
                .font(.headline)
                .padding(.horizontal)
            
            if #available(iOS 16.0, *) {
                Chart(ingredientCategoriesData) { category in
                    BarMark(
                        x: .value("Category", category.name),
                        y: .value("Count", category.count)
                    )
                    .foregroundStyle(by: .value("Category", category.name))
                }
                .frame(height: 150)
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(12)
                .shadow(radius: 2)
            } else {
                VStack(spacing: 8) {
                    ForEach(ingredientCategoriesData, id: \.name) { category in
                        HStack {
                            Text(category.name)
                                .font(.caption)
                                .frame(width: 60, alignment: .leading)
                            
                            ZStack(alignment: .leading) {
                                Rectangle()
                                    .fill(Color(.systemGray5))
                                    .frame(height: 16)
                                
                                Rectangle()
                                    .fill(colorForIngredientCategory(category.name))
                                    .frame(width: CGFloat(category.count) * 10, height: 16)
                            }
                            .cornerRadius(4)
                            
                            Text("\(category.count)")
                                .font(.caption)
                                .fontWeight(.medium)
                                .frame(width: 30, alignment: .trailing)
                        }
                    }
                }
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(12)
                .shadow(radius: 2)
            }
        }
    }
    
    private var seasonalIngredients: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Seizoenspatronen")
                .font(.headline)
                .padding(.horizontal)
            
            HStack(spacing: 20) {
                ForEach(seasonalData, id: \.season) { season in
                    VStack {
                        Text(season.emoji)
                            .font(.title)
                        
                        Text(season.season)
                            .font(.caption)
                            .fontWeight(.medium)
                        
                        Text("\(season.recipeCount)")
                            .font(.caption2)
                            .foregroundColor(.secondary)
                    }
                }
            }
            .padding()
            .background(Color(.systemBackground))
            .cornerRadius(12)
            .shadow(radius: 2)
        }
    }
    
    // MARK: - Metric Navigation Bar
    
    private var metricNavigationBar: some View {
        HStack(spacing: 0) {
            ForEach(AnalyticsMetric.allCases, id: \.self) { metric in
                Button(action: { selectedMetric = metric }) {
                    VStack(spacing: 4) {
                        Image(systemName: metric.icon)
                            .font(.title3)
                        Text(metric.displayName)
                            .font(.caption2)
                    }
                    .foregroundColor(selectedMetric == metric ? .brewTheme : .secondary)
                    .frame(maxWidth: .infinity)
                }
            }
        }
        .padding(.vertical, 8)
        .background(Color(.systemGray6))
        .cornerRadius(12)
    }
}

// MARK: - Computed Properties and Data Processing

extension AnalyticsView {
    
    private var filteredRecipes: [DetailedRecipeModel] {
        let cutoffDate = selectedTimeframe.cutoffDate
        return recipes.filter { recipe in
            guard let createdAt = recipe.createdAt else { return false }
            return createdAt >= cutoffDate
        }
    }
    
    private var filteredBrewSessions: [BrewSession] {
        let cutoffDate = selectedTimeframe.cutoffDate
        return brewAnalytics.brewSessions.filter { session in
            guard let startDate = session.brewDate else { return false }
            return startDate >= cutoffDate
        }
    }
    
    private var brewingActivityData: [ChartDataPoint] {
        let calendar = Calendar.current
        let endDate = Date()
        let startDate = selectedTimeframe.cutoffDate
        
        var dataPoints: [ChartDataPoint] = []
        var currentDate = startDate
        
        while currentDate <= endDate {
            let dayStart = calendar.startOfDay(for: currentDate)
            let dayEnd = calendar.date(byAdding: .day, value: 1, to: dayStart)!
            
            let count = filteredBrewSessions.filter { session in
                guard let sessionDate = session.startDate else { return false }
                return sessionDate >= dayStart && sessionDate < dayEnd
            }.count
            
            dataPoints.append(ChartDataPoint(date: currentDate, count: count))
            currentDate = calendar.date(byAdding: .day, value: 1, to: currentDate)!
        }
        
        return dataPoints
    }
    
    private var recentActivities: [ActivityItem] {
        var activities: [ActivityItem] = []
        
        // Add recipe activities
        for recipe in Array(recipes.prefix(3)) {
            activities.append(ActivityItem(
                id: recipe.id?.uuidString ?? UUID().uuidString,
                title: "Recept toegevoegd: \(recipe.wrappedName)",
                subtitle: recipe.wrappedType,
                date: recipe.createdAt ?? Date(),
                icon: "book.fill",
                color: .blue
            ))
        }
        
        // Add brewing activities
        for session in Array(brewSessions.prefix(3)) {
            activities.append(ActivityItem(
                id: session.id?.uuidString ?? UUID().uuidString,
                title: "Brouwsessie gestart",
                subtitle: session.recipeName ?? "Onbekend recept",
                date: session.startDate ?? Date(),
                icon: "drop.circle.fill",
                color: .orange
            ))
        }
        
        return activities.sorted { $0.date > $1.date }
    }
    
    private var successRate: Double {
        guard !filteredBrewSessions.isEmpty else { return 0 }
        let completedCount = filteredBrewSessions.filter { $0.isCompleted }.count
        return Double(completedCount) / Double(filteredBrewSessions.count)
    }
    
    private var completedBrews: Int {
        filteredBrewSessions.filter { $0.isCompleted }.count
    }
    
    private var activeBrews: Int {
        filteredBrewSessions.filter { !$0.isCompleted && !$0.isFailed }.count
    }
    
    private var failedBrews: Int {
        filteredBrewSessions.filter { $0.isFailed }.count
    }
    
    private var averageBrewDays: Int {
        let completedSessions = filteredBrewSessions.filter { $0.isCompleted }
        guard !completedSessions.isEmpty else { return 0 }
        
        let totalDays = completedSessions.compactMap { session -> Int? in
            guard let start = session.startDate, let end = session.endDate else { return nil }
            return Calendar.current.dateComponents([.day], from: start, to: end).day
        }.reduce(0, +)
        
        return totalDays / completedSessions.count
    }
    
    private var averagePrimaryDays: Int { 7 } // Placeholder
    private var averageSecondaryDays: Int { 14 } // Placeholder
    private var averageConditioningDays: Int { 21 } // Placeholder
    
    private var brewingStagesData: [StageData] {
        [
            StageData(name: "Maischen", count: filteredBrewSessions.filter { $0.currentStep >= 1 }.count),
            StageData(name: "Koken", count: filteredBrewSessions.filter { $0.currentStep >= 3 }.count),
            StageData(name: "Fermentatie", count: filteredBrewSessions.filter { $0.currentStep >= 6 }.count),
            StageData(name: "Bottelen", count: filteredBrewSessions.filter { $0.currentStep >= 9 }.count),
        ]
    }
    
    private var recipeTypesData: [TypeData] {
        let types = Dictionary(grouping: filteredRecipes) { $0.wrappedType }
        return types.map { TypeData(name: $0.key, count: $0.value.count) }
            .sorted { $0.count > $1.count }
    }
    
    private var complexityData: [ComplexityData] {
        let beginner = filteredRecipes.filter { $0.ingredientsArray.count <= 3 }.count
        let intermediate = filteredRecipes.filter { $0.ingredientsArray.count >= 4 && $0.ingredientsArray.count <= 6 }.count
        let advanced = filteredRecipes.filter { $0.ingredientsArray.count > 6 }.count
        
        return [
            ComplexityData(level: "Beginner", count: beginner, color: .green),
            ComplexityData(level: "Gevorderd", count: intermediate, color: .orange),
            ComplexityData(level: "Expert", count: advanced, color: .red)
        ]
    }
    
    private var abvDistributionData: [ABVRangeData] {
        let ranges = [
            ("< 4%", filteredRecipes.filter { $0.abv < 4.0 }.count),
            ("4-6%", filteredRecipes.filter { $0.abv >= 4.0 && $0.abv < 6.0 }.count),
            ("6-8%", filteredRecipes.filter { $0.abv >= 6.0 && $0.abv < 8.0 }.count),
            ("> 8%", filteredRecipes.filter { $0.abv >= 8.0 }.count)
        ]
        
        return ranges.map { ABVRangeData(label: $0.0, count: $0.1) }
    }
    
    private var topIngredients: [IngredientUsage] {
        var ingredientCounts: [String: Int] = [:]
        
        for recipe in filteredRecipes {
            for ingredient in recipe.ingredientsArray {
                let name = ingredient.wrappedName
                ingredientCounts[name, default: 0] += 1
            }
        }
        
        return ingredientCounts.map { IngredientUsage(name: $0.key, usage: $0.value) }
            .sorted { $0.usage > $1.usage }
    }
    
    private var ingredientCategoriesData: [CategoryData] {
        var categoryCounts: [String: Int] = [:]
        
        for recipe in filteredRecipes {
            for ingredient in recipe.ingredientsArray {
                let type = ingredient.wrappedType
                categoryCounts[type, default: 0] += 1
            }
        }
        
        return categoryCounts.map { CategoryData(name: $0.key, count: $0.value) }
            .sorted { $0.count > $1.count }
    }
    
    private var seasonalData: [SeasonData] {
        let calendar = Calendar.current
        var seasonCounts = [String: Int]()
        
        for recipe in filteredRecipes {
            guard let date = recipe.createdAt else { continue }
            let month = calendar.component(.month, from: date)
            
            let season = switch month {
            case 12, 1, 2: "Winter"
            case 3, 4, 5: "Lente"
            case 6, 7, 8: "Zomer"
            case 9, 10, 11: "Herfst"
            default: "Onbekend"
            }
            
            seasonCounts[season, default: 0] += 1
        }
        
        return [
            SeasonData(season: "Lente", emoji: "🌸", recipeCount: seasonCounts["Lente"] ?? 0),
            SeasonData(season: "Zomer", emoji: "☀️", recipeCount: seasonCounts["Zomer"] ?? 0),
            SeasonData(season: "Herfst", emoji: "🍂", recipeCount: seasonCounts["Herfst"] ?? 0),
            SeasonData(season: "Winter", emoji: "❄️", recipeCount: seasonCounts["Winter"] ?? 0)
        ]
    }
    
    private func colorForRecipeType(_ type: String) -> Color {
        switch type.lowercased() {
        case "bier", "beer": return .orange
        case "wijn", "wine": return .purple
        case "cider": return .green
        case "mede", "mead": return .yellow
        default: return .blue
        }
    }
    
    private func colorForIngredientCategory(_ category: String) -> Color {
        switch category.lowercased() {
        case "mout", "grain": return .brown
        case "hop": return .green
        case "gist", "yeast": return .yellow
        default: return .gray
        }
    }
}

// MARK: - Data Models

struct ChartDataPoint {
    let date: Date
    let count: Int
}

struct ActivityItem {
    let id: String
    let title: String
    let subtitle: String
    let date: Date
    let icon: String
    let color: Color
}

struct StageData {
    let name: String
    let count: Int
}

struct TypeData {
    let name: String
    let count: Int
}

struct ComplexityData {
    let level: String
    let count: Int
    let color: Color
}

struct ABVRangeData {
    let label: String
    let count: Int
}

struct IngredientUsage {
    let name: String
    let usage: Int
}

struct CategoryData {
    let name: String
    let count: Int
}

struct SeasonData {
    let season: String
    let emoji: String
    let recipeCount: Int
}

// MARK: - Enums

enum AnalyticsTimeframe: String, CaseIterable {
    case week = "week"
    case month = "month"
    case quarter = "quarter"
    case year = "year"
    
    var displayName: String {
        switch self {
        case .week: return "Week"
        case .month: return "Maand"
        case .quarter: return "Kwartaal"
        case .year: return "Jaar"
        }
    }
    
    var description: String {
        switch self {
        case .week: return "Afgelopen 7 dagen"
        case .month: return "Afgelopen 30 dagen"
        case .quarter: return "Afgelopen 3 maanden"
        case .year: return "Afgelopen 12 maanden"
        }
    }
    
    var cutoffDate: Date {
        let calendar = Calendar.current
        let now = Date()
        
        switch self {
        case .week:
            return calendar.date(byAdding: .day, value: -7, to: now) ?? now
        case .month:
            return calendar.date(byAdding: .day, value: -30, to: now) ?? now
        case .quarter:
            return calendar.date(byAdding: .month, value: -3, to: now) ?? now
        case .year:
            return calendar.date(byAdding: .year, value: -1, to: now) ?? now
        }
    }
}

enum AnalyticsMetric: String, CaseIterable {
    case overview = "overview"
    case brewing = "brewing"
    case recipes = "recipes"
    case ingredients = "ingredients"
    
    var displayName: String {
        switch self {
        case .overview: return "Overzicht"
        case .brewing: return "Brouwen"
        case .recipes: return "Recepten"
        case .ingredients: return "Ingrediënten"
        }
    }
    
    var icon: String {
        switch self {
        case .overview: return "chart.line.uptrend.xyaxis"
        case .brewing: return "drop.circle"
        case .recipes: return "book.circle"
        case .ingredients: return "leaf.circle"
        }
    }
}

// MARK: - Extensions

extension DateFormatter {
    static let monthDay: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "M/d"
        return formatter
    }()
    
    static let relative: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .none
        return formatter
    }()
}

#Preview {
    AnalyticsView()
        .environment(\.managedObjectContext, PersistenceController.preview.container.viewContext)
} 