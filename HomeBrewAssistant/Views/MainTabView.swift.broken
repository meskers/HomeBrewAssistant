//
//  MainTabView.swift
//  HomeBrewAssistant
//
//  Created by Cor Meskers on 09/06/2025.
//


import SwiftUI
import UniformTypeIdentifiers

// MARK: - Color Extensions for Dark Mode Support
extension Color {
    // Semantic colors for brewing app
    static let primaryCard = Color(UIColor.secondarySystemBackground)
    static let secondaryCard = Color(UIColor.tertiarySystemBackground)
    static let labelPrimary = Color(UIColor.label)
    static let labelSecondary = Color(UIColor.secondaryLabel)
    static let separatorColor = Color(UIColor.separator)
}

struct MainTabView: View {
    @ObservedObject private var localizationManager = LocalizationManager.shared
    @State private var selectedRecipeForBrewing: DetailedRecipe?
    @State private var showingLanguageSettings = false
    @State private var recipes: [DetailedRecipe] = []  // Start empty - recipes come from CoreData only
    @State private var selectedRecipe: DetailedRecipe?
    @State private var showingNewRecipe = false
    @State private var searchText = ""
    @State private var showingXMLImport = false
    @State private var showingAbout = false
    @State private var showingBeerXMLImportExport = false
    @State private var showingAIGenerator = false
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        TabView {
            // 1. RECEPTEN - Main recipe management
            SimpleRecipeListView(selectedRecipeForBrewing: $selectedRecipeForBrewing, recipes: $recipes)
                .tabItem {
                    Label("tab.recipes".localized, systemImage: "book.closed.fill")
                }
            
            // 2. BROUWEN - Enhanced brewing with simple and advanced modes
            EnhancedBrewingView(selectedRecipe: selectedRecipeForBrewing)
                .tabItem {
                    Label("tab.brewing".localized, systemImage: "timer.circle.fill")
                }
            
            // 3. CALCULATORS - All brewing calculators combined
            CalculatorsView()
                .tabItem {
                    Label("tab.calculators".localized, systemImage: "function")
                }
            
            // 4. INGREDI√ãNTEN - Inventory management  
            SmartIngredientsView(selectedRecipe: selectedRecipeForBrewing, allRecipes: $recipes)
                .tabItem {
                    Label("tab.inventory".localized, systemImage: "list.clipboard.fill")
                }
            
            // 5. MEER - Analytics, Photos, Settings, More tools
            MoreView(selectedRecipeForBrewing: $selectedRecipeForBrewing, recipes: $recipes)
                .tabItem {
                    Label("tab.more".localized, systemImage: "ellipsis.circle.fill")
                }
        }
        .sheet(isPresented: $showingLanguageSettings) {
        .onAppear {
            loadDefaultRecipesIfNeeded()
        }            LanguageSettingsView()
        }
        .onAppear {
            // Load default recipes immediately for better user experience
            // This ensures users always have recipes to start with
            loadDefaultRecipesIfNeeded()
        }
        .overlay(alignment: .topTrailing) {
            // Quick language switcher (floating)
            Button(action: {
                // Toggle between Dutch and English
                if localizationManager.currentLanguage == .dutch {
                    localizationManager.changeLanguage(to: .english)
                } else {
                    localizationManager.changeLanguage(to: .dutch)
                }
            }) {
                HStack(spacing: 4) {
                    Text(localizationManager.currentLanguage.flag)
                        .font(.system(size: 14))
                    Text(localizationManager.currentLanguage.rawValue.uppercased())
                        .font(.caption2.bold())
                    Image(systemName: "arrow.triangle.2.circlepath")
                        .font(.caption2)
                }
                .padding(.horizontal, 8)
                .padding(.vertical, 4)
                .background(Color.brewTheme.opacity(0.95))
                .foregroundColor(.white)
                .cornerRadius(15)
                .shadow(color: .black.opacity(0.2), radius: 2, x: 0, y: 1)
            }
            .padding(.trailing, 16)
            .padding(.top, 32) // Moved even higher, closer to status bar
        }
    }
}

struct SimpleRecipeListView: View {
    @ObservedObject private var localizationManager = LocalizationManager.shared
    @Binding var selectedRecipeForBrewing: DetailedRecipe?
    @Binding var recipes: [DetailedRecipe]
    @State private var showingAddRecipe = false
    @State private var selectedRecipe: DetailedRecipe?
    @State private var selectedRecipeForScaling: DetailedRecipe?
    @State private var searchText = ""
    @State private var showingXMLImport = false
    @State private var showingAbout = false
    @State private var showingBeerXMLImportExport = false
    @State private var showingAIGenerator = false
    
    var filteredRecipes: [DetailedRecipe] {
        if searchText.isEmpty {
            return recipes
        } else {
            return recipes.filter { recipe in
                recipe.name.localizedCaseInsensitiveContains(searchText) ||
                recipe.style.localizedCaseInsensitiveContains(searchText)
            }
        }
    }
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // Header in brouwtracker style
                VStack(spacing: 15) {
                    HStack {
                        Image(systemName: "book.fill")
                            .foregroundColor(.brewTheme)
                                            VStack(alignment: .leading) {
                        Text("recipes.title".localized)
                            .font(.title2)
                            .fontWeight(.bold)
                        if let recipe = selectedRecipeForBrewing {
                            Text("üç∫ \("recipes.selected".localized): \(recipe.name)")
                                .font(.caption)
                                .foregroundColor(.green)
                        } else {
                            Text("recipes.select.instruction".localized)
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    }
                        Spacer()
                                            Text("recipes.count".localized(with: filteredRecipes.count))
                        .font(.caption)
                        .padding(.horizontal, 8)
                        .padding(.vertical, 4)
                        .background(Color.primaryCard)
                        .cornerRadius(8)
                    }
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
                .padding(.horizontal)
                .padding(.top)
                
                // Search bar
                HStack {
                    Image(systemName: "magnifyingglass")
                        .foregroundColor(.secondary)
                    TextField("recipes.search.placeholder".localized, text: $searchText)
                }
                .padding()
                .background(Color.primaryCard)
                .cornerRadius(10)
                .padding()
                
                List {
                    ForEach(filteredRecipes) { recipe in
                        VStack(alignment: .leading, spacing: 8) {
                            SimpleRecipeRowView(recipe: recipe)
                                .onTapGesture {
                                    selectedRecipe = recipe
                                }
                            
                            HStack {
                                Button("ÔøΩÔøΩ \("recipes.details".localized)") {
                                    selectedRecipe = recipe
                                }
                                .buttonStyle(.bordered)
                                .controlSize(.small)
                                
                                Button("üìè Schaal") {
                                    selectedRecipeForScaling = recipe
                                }
                                .buttonStyle(.bordered)
                                .controlSize(.small)
                                
                                Spacer()
                                
                                Button("üç∫ \("recipes.use.for.brewing".localized)") {
                                    selectedRecipeForBrewing = recipe
                                }
                                .buttonStyle(.borderedProminent)
                                .controlSize(.small)
                            }
                            .padding(.horizontal, 4)
                        }
                        .padding(.vertical, 4)
                    }
                    .onDelete(perform: deleteRecipe)
                }
                
                VStack(spacing: 12) {
                    HStack(spacing: 15) {
                        Button("ü§ñ AI Generator") {
                            showingAIGenerator = true
                        }
                        .buttonStyle(.borderedProminent)
                        .controlSize(.large)
                        .frame(maxWidth: .infinity)
                        .tint(.purple)
                        
                        Button("recipes.add".localized) {
                            showingAddRecipe = true
                        }
                        .buttonStyle(.borderedProminent)
                        .controlSize(.large)
                        .frame(maxWidth: .infinity)
                    }
                    
                    Button("üì• \("recipes.import".localized)") {
                        showingXMLImport = true
                    }
                    .buttonStyle(.bordered)
                    .controlSize(.large)
                    .frame(maxWidth: .infinity)
                }
                .padding()
            }
            .navigationBarHidden(false)
            .navigationTitle("HomeBrewAssistant")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button {
                        showingBeerXMLImportExport = true
                    } label: {
                        Image(systemName: "square.and.arrow.up.on.square")
                            .foregroundColor(.brewTheme)
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    HStack {
                        // AI Recipe Generator Button
                        Button(action: {
                            showingAIGenerator = true
                        }) {
                            Image(systemName: "brain.head.profile")
                                .foregroundColor(.purple)
                        }
                        
                        Button {
                            showingAbout = true
                        } label: {
                            Image(systemName: "info.circle")
                                .foregroundColor(.brewTheme)
                        }
                    }
                }
            }
            .sheet(isPresented: $showingAbout) {
                AboutView()
                    .environmentObject(localizationManager)
            }
            .sheet(isPresented: $showingBeerXMLImportExport) {
                BeerXMLImportExportView(recipes: $recipes)
                    .environmentObject(localizationManager)
            }
            .sheet(isPresented: $showingAddRecipe) {
                AddRecipeView { newRecipe in
                    recipes.append(newRecipe)
                }
            }
            .sheet(isPresented: $showingXMLImport) {
                BeerXMLImportExportView(recipes: $recipes)
                    .environmentObject(localizationManager)
            }
            .sheet(item: $selectedRecipe) { recipe in
                SimpleRecipeDetailView(recipe: recipe)
            }
            .sheet(item: $selectedRecipeForScaling) { recipe in
                RecipeScalingView(recipe: recipe, originalBatchSize: 23.0)
                    .environmentObject(localizationManager)
            }
            .sheet(isPresented: $showingAIGenerator) {
                AIRecipeGeneratorView(recipes: $recipes)
            }
        }
    }
    
    private func deleteRecipe(at offsets: IndexSet) {
        recipes.remove(atOffsets: offsets)
    }
}

struct InfoSheetView: View {
    @Environment(\.dismiss) private var dismiss
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    VStack(alignment: .leading, spacing: 10) {
                        Text("üç∫ Gravity Uitleg")
                            .font(.title2)
                            .fontWeight(.bold)
                        
                        Text("**Original Gravity (OG)** is het soortelijk gewicht van je wort v√≥√≥r fermentatie. Dit meet hoeveel suikers er in je wort zitten.")
                        
                        Text("**Final Gravity (FG)** is het soortelijk gewicht n√° fermentatie. Dit toont hoeveel suikers er overgebleven zijn.")
                        
                        Text("Het verschil tussen OG en FG bepaalt hoeveel alcohol er geproduceerd is.")
                    }
                    
                    VStack(alignment: .leading, spacing: 10) {
                        Text("üìä Typische Waarden")
                            .font(.title2)
                            .fontWeight(.bold)
                        
                        Text("‚Ä¢ **Light bieren**: OG 1.030-1.040")
                        Text("‚Ä¢ **Standaard bieren**: OG 1.040-1.060")
                        Text("‚Ä¢ **Sterke bieren**: OG 1.060-1.080")
                        Text("‚Ä¢ **Zeer sterke bieren**: OG 1.080+")
                        
                        Divider()
                        
                        Text("‚Ä¢ **Droge bieren**: FG 1.008-1.012")
                        Text("‚Ä¢ **Medium bieren**: FG 1.012-1.016")
                        Text("‚Ä¢ **Zoete bieren**: FG 1.016-1.020")
                    }
                    
                    VStack(alignment: .leading, spacing: 10) {
                        Text("üßÆ Berekeningen")
                            .font(.title2)
                            .fontWeight(.bold)
                        
                        Text("**ABV**: (OG - FG) √ó 131.25")
                        Text("**Attenuation**: ((OG - FG) / (OG - 1.000)) √ó 100%")
                        Text("**Calorie√´n**: Gebaseerd op alcohol en restsuikers")
                        Text("**Alcohol opbrengst**: ABV √ó 7.94 gram/liter")
                    }
                    
                    VStack(alignment: .leading, spacing: 10) {
                        Text("üí° Voorbeeld")
                            .font(.title2)
                            .fontWeight(.bold)
                        
                        Text("Voor een **standaard pilsener**:")
                        Text("‚Ä¢ OG: 1.050 (5% suikers)")
                        Text("‚Ä¢ FG: 1.010 (1% restsuikers)")
                        Text("‚Ä¢ ABV: (1.050 - 1.010) √ó 131.25 = **5.25%**")
                        Text("‚Ä¢ Attenuation: 80% (goede vergisting)")
                    }
                }
                .padding()
            }
            .navigationTitle("Uitleg")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Sluiten") {
                        dismiss()
                    }
                }
            }
        }
    }
}

struct SimpleRecipeRowView: View {
    let recipe: DetailedRecipe
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Text(recipe.name)
                    .font(.headline)
                    .fontWeight(.bold)
                Spacer()
                DifficultyBadge(difficulty: recipe.difficulty)
            }
            
            Text(recipe.style)
                .font(.subheadline)
                .foregroundColor(.secondary)
            
            HStack {
                Label(String(format: "%.1f%%", recipe.abv), systemImage: "drop.fill")
                Label("\(recipe.ibu)", systemImage: "leaf.fill")
                Label("\(recipe.brewTime) min", systemImage: "clock.fill")
                Spacer()
            }
            .font(.caption)
            .foregroundColor(.brewTheme)
        }
        .padding(.vertical, 4)
    }
}

struct DifficultyBadge: View {
    let difficulty: RecipeDifficulty
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        Text(difficulty.rawValue)
            .font(.caption)
            .fontWeight(.medium)
            .padding(.horizontal, 8)
            .padding(.vertical, 2)
            .background(difficulty.color.opacity(0.2))
            .foregroundColor(difficulty.color)
            .cornerRadius(8)
    }
}

struct SimpleRecipeDetailView: View {
    let recipe: DetailedRecipe
    @Environment(\.dismiss) private var dismiss
    @State private var selectedTab = 0
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // Header
                VStack(spacing: 15) {
                    HStack {
                        VStack(alignment: .leading, spacing: 5) {
                            Text(recipe.name)
                                .font(.title2)
                                .fontWeight(.bold)
                            Text(recipe.style)
                                .font(.subheadline)
                                .foregroundColor(.secondary)
                        }
                        Spacer()
                        DifficultyBadge(difficulty: recipe.difficulty)
                    }
                    
                    HStack(spacing: 20) {
                        StatView(title: "ABV", value: String(format: "%.1f%%", recipe.abv), color: .green)
                        StatView(title: "IBU", value: "\(recipe.ibu)", color: .orange)
                        StatView(title: "Tijd", value: "\(recipe.brewTime) min", color: .blue)
                    }
                }
                .padding()
                .background(Color(.systemGray6))
                
                // Tab selector
                Picker("", selection: $selectedTab) {
                    Text("Ingredi√´nten").tag(0)
                    Text("Instructies").tag(1)
                    Text("Notities").tag(2)
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding()
                
                // Content
                ScrollView {
                    Group {
                        switch selectedTab {
                        case 0:
                            IngredientsTabView(ingredients: recipe.ingredients)
                        case 1:
                            InstructionsTabView(instructions: recipe.instructions)
                        case 2:
                            NotesTabView(notes: recipe.notes)
                        default:
                            EmptyView()
                        }
                    }
                    .padding()
                }
            }
            .navigationTitle("Recept Detail")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Sluiten") {
                        dismiss()
                    }
                }
            }
        }
    }
}

struct StatView: View {
    let title: String
    let value: String
    let color: Color
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        VStack(spacing: 4) {
            Text(value)
                .font(.headline)
                .fontWeight(.bold)
                .foregroundColor(color)
            Text(title)
                .font(.caption)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity)
    }
}

struct IngredientsTabView: View {
    let ingredients: [RecipeIngredient]
    
    var grainIngredients: [RecipeIngredient] {
        ingredients.filter { $0.type == .grain }
    }
    
    var hopIngredients: [RecipeIngredient] {
        ingredients.filter { $0.type == .hop }
    }
    
    var yeastIngredients: [RecipeIngredient] {
        ingredients.filter { $0.type == .yeast }
    }
    
    var otherIngredients: [RecipeIngredient] {
        ingredients.filter { $0.type == .other }
    }
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        VStack(alignment: .leading, spacing: 20) {
            if !grainIngredients.isEmpty {
                IngredientSection(title: "Granen", ingredients: grainIngredients, icon: "leaf.fill", color: .brown)
            }
            
            if !hopIngredients.isEmpty {
                IngredientSection(title: "Hoppen", ingredients: hopIngredients, icon: "leaf.fill", color: .green)
            }
            
            if !yeastIngredients.isEmpty {
                IngredientSection(title: "Gist", ingredients: yeastIngredients, icon: "drop.circle.fill", color: .yellow)
            }
            
            if !otherIngredients.isEmpty {
                IngredientSection(title: "Overig", ingredients: otherIngredients, icon: "plus.circle.fill", color: .gray)
            }
        }
    }
}

struct IngredientSection: View {
    let title: String
    let ingredients: [RecipeIngredient]
    let icon: String
    let color: Color
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            HStack {
                Image(systemName: icon)
                    .foregroundColor(color)
                Text(title)
                    .font(.headline)
                    .fontWeight(.bold)
            }
            
            ForEach(ingredients) { ingredient in
                HStack {
                    VStack(alignment: .leading, spacing: 2) {
                        Text(ingredient.name)
                            .font(.body)
                        Text(ingredient.timing)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    Spacer()
                    Text(ingredient.amount)
                        .font(.body)
                        .fontWeight(.medium)
                        .foregroundColor(color)
                }
                .padding(.leading)
            }
        }
        .padding()
        .background(Color(.systemGray6))
        .cornerRadius(12)
    }
}

struct InstructionsTabView: View {
    let instructions: [String]
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        VStack(alignment: .leading, spacing: 15) {
            Text("Brouwinstructies")
                .font(.headline)
                .fontWeight(.bold)
            
            ForEach(Array(instructions.enumerated()), id: \.offset) { index, instruction in
                HStack(alignment: .top, spacing: 12) {
                    Text("\(index + 1)")
                        .font(.headline)
                        .fontWeight(.bold)
                        .foregroundColor(.brewTheme)
                        .frame(width: 25, alignment: .center)
                        .padding(.top, 2)
                    
                    Text(instruction)
                        .font(.body)
                        .multilineTextAlignment(.leading)
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(10)
            }
        }
    }
}

struct NotesTabView: View {
    let notes: String
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        VStack(alignment: .leading, spacing: 15) {
            Text("Brouwnotities")
                .font(.headline)
                .fontWeight(.bold)
            
            Text(notes)
                .font(.body)
                .multilineTextAlignment(.leading)
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
        }
    }
}

struct AddRecipeView: View {
    @Environment(\.dismiss) private var dismiss
    let onSave: (DetailedRecipe) -> Void
    
    @State private var name = ""
    @State private var style = ""
    @State private var abv = ""
    @State private var ibu = ""
    @State private var difficulty = RecipeDifficulty.beginner
    @State private var brewTime = ""
    @State private var notes = ""
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Basis Informatie")) {
                    TextField("Recept naam", text: $name)
                    TextField("Bierstijl", text: $style)
                    TextField("ABV %", text: $abv)
                        .keyboardType(.decimalPad)
                    TextField("IBU", text: $ibu)
                        .keyboardType(.numberPad)
                    TextField("Brouwtijd (minuten)", text: $brewTime)
                        .keyboardType(.numberPad)
                    
                    Picker("Moeilijkheidsgraad", selection: $difficulty) {
                        ForEach(RecipeDifficulty.allCases, id: \.self) { level in
                            Text(level.rawValue).tag(level)
                        }
                    }
                }
                
                Section(header: Text("Notities")) {
                    TextField("Brouwnotities en tips", text: $notes, axis: .vertical)
                        .lineLimit(3...6)
                }
            }
            .navigationTitle("Nieuw Recept")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Annuleren") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Opslaan") {
                        saveRecipe()
                    }
                    .disabled(name.isEmpty || style.isEmpty)
                }
            }
        }
    }
    
    private func saveRecipe() {
        let newRecipe = DetailedRecipe(
            name: name,
            style: style,
            abv: Double(abv) ?? 0.0,
            ibu: Int(ibu) ?? 0,
            difficulty: difficulty,
            brewTime: Int(brewTime) ?? 0,
            ingredients: [], // Simplified for now
            instructions: [],
            notes: notes
        )
        
        onSave(newRecipe)
        dismiss()
    }
}

struct DetailedRecipe: Identifiable {
    let id = UUID()
    let name: String
    let style: String
    let abv: Double
    let ibu: Int
    let difficulty: RecipeDifficulty
    let brewTime: Int // minutes
    let ingredients: [RecipeIngredient]
    let instructions: [String]
    let notes: String
}

struct RecipeIngredient: Identifiable {
    let id = UUID()
    let name: String
    let amount: String
    let type: IngredientType
    let timing: String
}



enum RecipeDifficulty: String, CaseIterable {
    case beginner = "Beginner"
    case intermediate = "Gevorderd"
    case advanced = "Expert"
    
    var color: Color {
        switch self {
        case .beginner: return .green
        case .intermediate: return .orange
        case .advanced: return .red
        }
    }
}

struct SmartIngredientsView: View {
    let selectedRecipe: DetailedRecipe?
    @Binding var allRecipes: [DetailedRecipe]
    @State private var currentView: IngredientsViewMode = .inventory
    @State private var ingredients: [SimpleIngredient] = [] // CLEAN APP STORE: No mock ingredients
    @State private var newIngredientName = ""
    @State private var newIngredientAmount = ""
    @State private var selectedCategory = "Graan"
    @State private var showingShoppingList = false
    @State private var selectedRecipesForShopping: Set<UUID> = []
    
    private let categories = ["Graan", "Hop", "Gist", "Overig"]
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // Header
                VStack(spacing: 15) {
                    HStack {
                        Image(systemName: currentView == .inventory ? "list.clipboard.fill" : "cart.fill")
                            .foregroundColor(.blue)
                        VStack(alignment: .leading) {
                            Text(currentView == .inventory ? "Ingredi√´nten Voorraad" : "Slimme Boodschappenlijst")
                                .font(.title2)
                                .fontWeight(.bold)
                            if let recipe = selectedRecipe, currentView == .inventory {
                                Text("üìñ Voor recept: \(recipe.name)")
                                    .font(.caption)
                                    .foregroundColor(.green)
                            } else if currentView == .inventory {
                                Text("Beheer je brouw ingredi√´nten")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            } else {
                                Text("Automatisch gegenereerd uit recepten")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                        }
                        Spacer()
                        Text(currentView == .inventory ? "\(ingredients.count) items" : "\(selectedRecipesForShopping.count) recepten")
                            .font(.caption)
                            .padding(.horizontal, 8)
                            .padding(.vertical, 4)
                            .background(Color(.systemGray5))
                            .cornerRadius(8)
                    }
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
                .padding(.horizontal)
                .padding(.top)
                
                // View Mode Picker
                Picker("Weergave", selection: $currentView) {
                    Text("Voorraad").tag(IngredientsViewMode.inventory)
                    Text("Boodschappen").tag(IngredientsViewMode.shopping)
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding(.horizontal)
                
                if currentView == .inventory {
                    InventoryView(
                        ingredients: $ingredients,
                        newIngredientName: $newIngredientName,
                        newIngredientAmount: $newIngredientAmount,
                        selectedCategory: $selectedCategory,
                        categories: categories
                    )
                } else {
                    SmartShoppingListView(
                        allRecipes: allRecipes,
                        currentInventory: ingredients,
                        selectedRecipes: $selectedRecipesForShopping
                    )
                }
            }
            .navigationBarHidden(true)
        }
    }
}

enum IngredientsViewMode {
    case inventory
    case shopping
}

struct InventoryView: View {
    @Binding var ingredients: [SimpleIngredient]
    @Binding var newIngredientName: String
    @Binding var newIngredientAmount: String
    @Binding var selectedCategory: String
    let categories: [String]
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        VStack(spacing: 0) {
            List {
                ForEach(ingredients.grouped) { group in
                    Section(group.category) {
                        ForEach(group.items) { ingredient in
                            HStack {
                                VStack(alignment: .leading) {
                                    Text(ingredient.name)
                                        .font(.headline)
                                    Text(ingredient.amount)
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                }
                                Spacer()
                            }
                        }
                        .onDelete { indexSet in
                            let itemsToDelete = indexSet.map { group.items[$0] }
                            ingredients.removeAll { item in
                                itemsToDelete.contains { $0.id == item.id }
                            }
                        }
                    }
                }
            }
            
            VStack(spacing: 10) {
                HStack {
                    TextField("Ingredient naam", text: $newIngredientName)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                    
                    TextField("Hoeveelheid", text: $newIngredientAmount)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .frame(width: 100)
                }
                
                HStack {
                    Picker("Categorie", selection: $selectedCategory) {
                        ForEach(categories, id: \.self) { category in
                            Text(category).tag(category)
                        }
                    }
                    .pickerStyle(SegmentedPickerStyle())
                    
                    Button("Toevoegen") {
                        if !newIngredientName.isEmpty && !newIngredientAmount.isEmpty {
                            ingredients.append(SimpleIngredient(
                                name: newIngredientName,
                                category: selectedCategory,
                                amount: newIngredientAmount
                            ))
                            newIngredientName = ""
                            newIngredientAmount = ""
                        }
                    }
                    .buttonStyle(.borderedProminent)
                }
            }
            .padding()
        }
    }
}

struct SmartShoppingListView: View {
    let allRecipes: [DetailedRecipe]
    let currentInventory: [SimpleIngredient]
    @Binding var selectedRecipes: Set<UUID>
    @State private var shoppingItems: [ShoppingItem] = []
    @State private var showingRecipeSelector = false
    @State private var estimatedTotal: Double = 0.0
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        VStack(spacing: 0) {
            // Recipe Selection Section
            VStack(spacing: 15) {
                HStack {
                    Text("Selecteer Recepten")
                        .font(.headline)
                    Spacer()
                    Button("Kies Recepten") {
                        showingRecipeSelector = true
                    }
                    .buttonStyle(.bordered)
                    .controlSize(.small)
                }
                
                if selectedRecipes.isEmpty {
                    Text("Geen recepten geselecteerd")
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(8)
                } else {
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 8) {
                            ForEach(selectedRecipeObjects, id: \.id) { recipe in
                                HStack(spacing: 4) {
                                    Text(recipe.name)
                                        .font(.caption)
                                    Button("√ó") {
                                        selectedRecipes.remove(recipe.id)
                                        generateShoppingList()
                                    }
                                    .font(.caption)
                                    .foregroundColor(.red)
                                }
                                .padding(.horizontal, 8)
                                .padding(.vertical, 4)
                                .background(Color.blue.opacity(0.1))
                                .cornerRadius(8)
                            }
                        }
                        .padding(.horizontal)
                    }
                }
            }
            .padding()
            .background(Color(.systemGray6))
            .cornerRadius(12)
            .padding(.horizontal)
            
            if !shoppingItems.isEmpty {
                // Shopping List
                List {
                    Section {
                        ForEach(shoppingItems.indices, id: \.self) { index in
                            ShoppingItemRow(
                                item: $shoppingItems[index],
                                onToggle: {
                                    calculateTotal()
                                }
                            )
                        }
                    } header: {
                        HStack {
                            Text("Boodschappenlijst")
                            Spacer()
                            Text("Geschat: ‚Ç¨\(String(format: "%.2f", estimatedTotal))")
                                .font(.caption)
                                .foregroundColor(.green)
                        }
                    }
                    
                    Section {
                        HStack {
                            Text("Totaal Geschat")
                                .font(.headline)
                            Spacer()
                            Text("‚Ç¨\(String(format: "%.2f", estimatedTotal))")
                                .font(.headline)
                                .foregroundColor(.green)
                        }
                        .padding(.vertical, 8)
                    }
                }
                
                // Action Buttons
                HStack(spacing: 15) {
                    Button("Alles Afvinken") {
                        shoppingItems.indices.forEach { index in
                            shoppingItems[index].isPurchased = true
                        }
                        calculateTotal()
                    }
                    .buttonStyle(.bordered)
                    .controlSize(.large)
                    
                    Button("Lijst Wissen") {
                        shoppingItems = []
                        selectedRecipes = []
                        estimatedTotal = 0.0
                    }
                    .buttonStyle(.bordered)
                    .controlSize(.large)
                    
                    Button("Naar Voorraad") {
                        addPurchasedToInventory()
                    }
                    .buttonStyle(.borderedProminent)
                    .controlSize(.large)
                    .disabled(shoppingItems.allSatisfy { !$0.isPurchased })
                }
                .padding()
            } else {
                Spacer()
                VStack(spacing: 20) {
                    Image(systemName: "cart")
                        .font(.system(size: 60))
                        .foregroundColor(.secondary)
                    
                    Text("Selecteer recepten om een slimme boodschappenlijst te genereren")
                        .multilineTextAlignment(.center)
                        .foregroundColor(.secondary)
                    
                    Text("üí° Alleen ontbrekende ingredi√´nten worden toegevoegd")
                        .font(.caption)
                        .foregroundColor(.blue)
                        .multilineTextAlignment(.center)
                }
                .padding()
                Spacer()
            }
        }
        .sheet(isPresented: $showingRecipeSelector) {
            RecipeSelectorView(
                recipes: allRecipes,
                selectedRecipes: $selectedRecipes,
                onSelectionChange: generateShoppingList
            )
        }
        .onAppear {
            if !selectedRecipes.isEmpty {
                generateShoppingList()
            }
        }
    }
    
    private var selectedRecipeObjects: [DetailedRecipe] {
        allRecipes.filter { selectedRecipes.contains($0.id) }
    }
    
    private func generateShoppingList() {
        var items: [ShoppingItem] = []
        
        // Collect all ingredients from selected recipes
        for recipe in selectedRecipeObjects {
            for ingredient in recipe.ingredients {
                // Check if we already have this ingredient in inventory
                let hasInInventory = currentInventory.contains { inv in
                    inv.name.localizedCaseInsensitiveContains(ingredient.name) ||
                    ingredient.name.localizedCaseInsensitiveContains(inv.name)
                }
                
                if !hasInInventory {
                    // Check if already in shopping list
                    if let existingIndex = items.firstIndex(where: { $0.name.localizedCaseInsensitiveContains(ingredient.name) }) {
                        // Update quantity if needed (simplified for now)
                        items[existingIndex].recipes.append(recipe.name)
                    } else {
                        let estimatedPrice = estimatePrice(for: ingredient)
                        items.append(ShoppingItem(
                            name: ingredient.name,
                            amount: ingredient.amount,
                            category: categorizeIngredient(ingredient),
                            estimatedPrice: estimatedPrice,
                            recipes: [recipe.name]
                        ))
                    }
                }
            }
        }
        
        shoppingItems = items.sorted { $0.category < $1.category }
        calculateTotal()
    }
    
    private func categorizeIngredient(_ ingredient: RecipeIngredient) -> String {
        switch ingredient.type {
        case .grain:
            return "Graan"
        case .hop:
            return "Hop"
        case .yeast:
            return "Gist"
        case .adjunct:
            return "Adjunct"
        case .other:
            return "Overig"
        }
    }
    
    private func estimatePrice(for ingredient: RecipeIngredient) -> Double {
        // Simple price estimation based on ingredient type and amount
        let basePrice: Double
        switch ingredient.type {
        case .grain:
            basePrice = 2.50 // per kg
        case .hop:
            basePrice = 0.05 // per gram (realistic pricing: ‚Ç¨50/kg)
        case .yeast:
            basePrice = 3.50 // per packet
        case .adjunct:
            basePrice = 4.00 // per kg
        case .other:
            basePrice = 5.00 // generic
        }
        
        // Extract numeric amount (simplified)
        let amountString = ingredient.amount.replacingOccurrences(of: "[^0-9.]", with: "", options: .regularExpression)
        let amount = Double(amountString) ?? 1.0
        
        return basePrice * amount
    }
    
    private func calculateTotal() {
        estimatedTotal = shoppingItems.reduce(0) { total, item in
            total + (item.isPurchased ? 0 : item.estimatedPrice)
        }
    }
    
    private func addPurchasedToInventory() {
        // This would add purchased items to inventory
        // For now, just mark them as handled
        shoppingItems.removeAll { $0.isPurchased }
        calculateTotal()
    }
}

struct ShoppingItem: Identifiable {
    let id = UUID()
    let name: String
    let amount: String
    let category: String
    let estimatedPrice: Double
    var isPurchased: Bool = false
    var recipes: [String]
}

struct ShoppingItemRow: View {
    @Binding var item: ShoppingItem
    let onToggle: () -> Void
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        HStack(spacing: 12) {
            Button(action: {
                item.isPurchased.toggle()
                onToggle()
            }) {
                Image(systemName: item.isPurchased ? "checkmark.circle.fill" : "circle")
                    .font(.title2)
                    .foregroundColor(item.isPurchased ? .green : .secondary)
            }
            .buttonStyle(.plain)
            
            VStack(alignment: .leading, spacing: 4) {
                Text(item.name)
                    .font(.headline)
                    .strikethrough(item.isPurchased)
                    .foregroundColor(item.isPurchased ? .secondary : .primary)
                
                HStack {
                    Text(item.amount)
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Text("‚Ä¢")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Text(item.category)
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                if item.recipes.count > 1 {
                    Text("Voor: \(item.recipes.joined(separator: ", "))")
                        .font(.caption2)
                        .foregroundColor(.blue)
                }
            }
            
            Spacer()
            
            VStack(alignment: .trailing) {
                Text("‚Ç¨\(String(format: "%.2f", item.estimatedPrice))")
                    .font(.caption)
                    .foregroundColor(item.isPurchased ? .secondary : .green)
                    .strikethrough(item.isPurchased)
            }
        }
        .padding(.vertical, 4)
    }
}

struct RecipeSelectorView: View {
    let recipes: [DetailedRecipe]
    @Binding var selectedRecipes: Set<UUID>
    let onSelectionChange: () -> Void
    @Environment(\.dismiss) private var dismiss
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        NavigationView {
            List {
                ForEach(recipes) { recipe in
                    HStack {
                        VStack(alignment: .leading) {
                            Text(recipe.name)
                                .font(.headline)
                            Text(recipe.style)
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        
                        Spacer()
                        
                        if selectedRecipes.contains(recipe.id) {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.blue)
                        }
                    }
                    .contentShape(Rectangle())
                    .onTapGesture {
                        if selectedRecipes.contains(recipe.id) {
                            selectedRecipes.remove(recipe.id)
                        } else {
                            selectedRecipes.insert(recipe.id)
                        }
                    }
                }
            }
            .navigationTitle("Selecteer Recepten")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Wissen") {
                        selectedRecipes.removeAll()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Klaar") {
                        onSelectionChange()
                        dismiss()
                    }
                }
            }
        }
    }
}

struct SimpleIngredient: Identifiable {
    let id = UUID()
    let name: String
    let category: String
    let amount: String
}

struct IngredientGroup: Identifiable {
    let id = UUID()
    let category: String
    let items: [SimpleIngredient]
}

extension Array where Element == SimpleIngredient {
    var grouped: [IngredientGroup] {
        let groupedDict = Dictionary(grouping: self) { $0.category }
        return groupedDict.map { IngredientGroup(category: $0.key, items: $0.value) }
            .sorted { $0.category < $1.category }
    }
}

struct SimpleBrewTrackerView: View {
    let selectedRecipe: DetailedRecipe?
    @State private var isBrewingActive = false
    @State private var currentStep = 0
    @State private var stepTimer: Timer?
    @State private var elapsedTime = 0
    @State private var isTimerRunning = false
    @State private var showingStepDetail = false
    @State private var showingDataEntry = false
    @State private var brewStartTime = Date()
    
    // Tracking data
    @State private var currentTemperature = ""
    @State private var currentNotes = ""
    @State private var currentGravity = ""
    
    private var brewingSteps: [BrewStep] {
        return generateBrewingSteps(from: selectedRecipe)
    }
    
    private let defaultBrewingSteps = [
        BrewStep(name: "Graan malen", duration: 15, description: "Maal de granen tot de juiste grofheid", tips: "Gebruik een grove maling voor all-grain, fijnere voor extract", requiresTemperature: false, targetTemperature: ""),
        BrewStep(name: "Maischen", duration: 60, description: "Houd temperatuur tussen 65-68¬∞C", tips: "Roer om de 15 minuten voor gelijke temperatuur", requiresTemperature: true, targetTemperature: "65-68¬∞C"),
        BrewStep(name: "Spoelen", duration: 30, description: "Spoel met 78¬∞C water", tips: "Stop bij 1.010 SG om tannines te vermijden", requiresTemperature: true, targetTemperature: "78¬∞C"),
        BrewStep(name: "Koken", duration: 60, description: "Breng aan de kook en houd rollend", tips: "Voeg hoppen toe volgens recept timing", requiresTemperature: true, targetTemperature: "100¬∞C"),
        BrewStep(name: "Hoppen toevoegen", duration: 5, description: "Voeg hoppen toe op juiste momenten", tips: "Bittere hoppen 60 min, aroma hoppen 5 min", requiresTemperature: false, targetTemperature: ""),
        BrewStep(name: "Koelen", duration: 20, description: "Koel snel naar gisttemperatuur", tips: "Streef naar 18-22¬∞C voor ales, 8-12¬∞C voor lagers", requiresTemperature: true, targetTemperature: "18-22¬∞C"),
        BrewStep(name: "Gist toevoegen", duration: 10, description: "Voeg gehydrateerde gist toe", tips: "Zorg dat wort onder 25¬∞C is", requiresTemperature: true, targetTemperature: "< 25¬∞C"),
        BrewStep(name: "Primaire fermentatie", duration: 10080, description: "7 dagen fermentatie", tips: "Houd temperatuur stabiel, vermijd licht", requiresTemperature: true, targetTemperature: "18-22¬∞C"),
        BrewStep(name: "Secundaire fermentatie", duration: 20160, description: "14 dagen nacuring", tips: "Optioneel: voeg dry hops toe", requiresTemperature: true, targetTemperature: "18-22¬∞C"),
        BrewStep(name: "Bottelen", duration: 30, description: "Bottelen met priming sugar", tips: "Saniteer alles, vermijd oxidatie", requiresTemperature: false, targetTemperature: "")
    ]
    
    private func loadDefaultRecipesIfNeeded() {
        // Ensure users always have default recipes available immediately
        if recipes.isEmpty {
            recipes = DefaultRecipesDatabase.getAllDefaultRecipes()
        }
    }
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // Header in consistent style
                VStack(spacing: 15) {
                    HStack {
                        Image(systemName: isBrewingActive ? "drop.fill" : "timer.circle.fill")
                            .foregroundColor(.blue)
                        VStack(alignment: .leading) {
                            Text(isBrewingActive ? "Actieve Brouwsessie" : "Brouwtracker")
                                .font(.title2)
                                .fontWeight(.bold)
                            if let recipe = selectedRecipe {
                                Text("üìñ \(recipe.name)")
                                    .font(.caption)
                                    .foregroundColor(.green)
                            } else if !isBrewingActive {
                                Text("Klaar om te brouwen")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                        }
                        Spacer()
                        if isBrewingActive {
                            Text("Stap \(currentStep + 1)/\(brewingSteps.count)")
                                .font(.caption)
                                .padding(.horizontal, 8)
                                .padding(.vertical, 4)
                                .background(Color(.systemGray5))
                                .cornerRadius(8)
                        } else {
                            Text("\(brewingSteps.count) stappen")
                                .font(.caption)
                                .padding(.horizontal, 8)
                                .padding(.vertical, 4)
                                .background(Color(.systemGray5))
                                .cornerRadius(8)
                        }
                    }
                    
                    if isBrewingActive {
                        Text("Totale tijd: \(formatTime(Int(Date().timeIntervalSince(brewStartTime))))")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
                .padding(.horizontal)
                .padding(.top)
                
                if isBrewingActive {
                    // Current step card
                    VStack(spacing: 20) {
                        HStack {
                            VStack(alignment: .leading) {
                                Text(brewingSteps[currentStep].name)
                                    .font(.title)
                                    .fontWeight(.bold)
                                
                                if brewingSteps[currentStep].requiresTemperature {
                                    HStack {
                                        Image(systemName: "thermometer")
                                            .foregroundColor(.orange)
                                        Text("Doel: \(brewingSteps[currentStep].targetTemperature)")
                                            .font(.caption)
                                            .foregroundColor(.secondary)
                                    }
                                }
                            }
                            
                            Spacer()
                            
                            // Visual indicators
                            VStack(spacing: 4) {
                                if hasDataForCurrentStep() {
                                    Image(systemName: "checkmark.circle.fill")
                                        .foregroundColor(.green)
                                        .font(.title3)
                                }
                                
                                if brewingSteps[currentStep].requiresTemperature {
                                    Image(systemName: "thermometer")
                                        .foregroundColor(.orange)
                                        .font(.caption)
                                }
                            }
                        }
                        
                        // Timer display
                        VStack(spacing: 10) {
                            Text(formatTime(elapsedTime))
                                .font(.system(size: 48, weight: .bold, design: .monospaced))
                                .foregroundColor(isTimerRunning ? .green : .primary)
                            
                            if brewingSteps[currentStep].duration > 0 {
                                Text("van \(formatTime(brewingSteps[currentStep].duration * 60))")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                
                                ProgressView(value: Double(elapsedTime), 
                                           total: Double(brewingSteps[currentStep].duration * 60))
                                    .progressViewStyle(LinearProgressViewStyle(tint: .blue))
                                    .scaleEffect(x: 1, y: 2, anchor: .center)
                            }
                        }
                        
                        // Primary Timer Controls
                        HStack(spacing: 15) {
                            Button {
                                toggleTimer()
                            } label: {
                                HStack {
                                    Image(systemName: isTimerRunning ? "pause.fill" : "play.fill")
                                    Text(isTimerRunning ? "Pause" : "Start")
                                }
                                .frame(maxWidth: .infinity)
                            }
                            .buttonStyle(.borderedProminent)
                            .controlSize(.large)
                            
                            Button {
                                resetTimer()
                            } label: {
                                HStack {
                                    Image(systemName: "gobackward")
                                    Text("Reset")
                                }
                                .frame(maxWidth: .infinity)
                            }
                            .buttonStyle(.bordered)
                            .controlSize(.large)
                        }
                        
                        // Secondary Actions Row
                        HStack(spacing: 12) {
                            Button {
                                showingStepDetail = true
                            } label: {
                                VStack(spacing: 4) {
                                    Image(systemName: "info.circle")
                                    Text("Info")
                                        .font(.caption)
                                }
                            }
                            .buttonStyle(.bordered)
                            .frame(maxWidth: .infinity)
                            
                            Button {
                                showingDataEntry = true
                            } label: {
                                VStack(spacing: 4) {
                                    Image(systemName: hasDataForCurrentStep() ? "checkmark.circle.fill" : "pencil.circle")
                                        .foregroundColor(hasDataForCurrentStep() ? .green : .primary)
                                    Text("Data")
                                        .font(.caption)
                                }
                            }
                            .buttonStyle(.bordered)
                            .frame(maxWidth: .infinity)
                            
                            Button {
                                // Quick complete step
                                stopTimer()
                                
                                // Save any default data if none was entered
                                if !hasDataForCurrentStep() {
                                    if brewingSteps[currentStep].requiresTemperature {
                                        currentTemperature = brewingSteps[currentStep].targetTemperature.components(separatedBy: "-").first ?? ""
                                    }
                                    currentNotes = "Stap voltooid"
                                }
                                
                                // Move to next step
                                nextStep()
                            } label: {
                                VStack(spacing: 4) {
                                    Image(systemName: "checkmark.circle")
                                    Text("Klaar")
                                        .font(.caption)
                                }
                            }
                            .buttonStyle(.bordered)
                            .frame(maxWidth: .infinity)
                            .disabled(currentStep == brewingSteps.count - 1)
                        }
                        
                        // Navigation
                        HStack(spacing: 15) {
                            Button {
                                previousStep()
                            } label: {
                                HStack {
                                    Image(systemName: "chevron.left")
                                    Text("Vorige Stap")
                                }
                                .frame(maxWidth: .infinity)
                            }
                            .buttonStyle(.bordered)
                            .disabled(currentStep == 0)
                            
                            Button {
                                nextStep()
                            } label: {
                                HStack {
                                    Text("Volgende Stap")
                                    Image(systemName: "chevron.right")
                                }
                                .frame(maxWidth: .infinity)
                            }
                            .buttonStyle(.bordered)
                            .disabled(currentStep == brewingSteps.count - 1)
                        }
                        
                        // End Session (separated and more prominent)
                        Button {
                            endSession()
                        } label: {
                            HStack {
                                Image(systemName: "stop.circle")
                                Text("Sessie Be√´indigen")
                            }
                        }
                        .buttonStyle(.bordered)
                        .foregroundColor(.red)
                        .padding(.top, 10)
                    }
                    .padding()
                    .background(Color(.systemBackground))
                    .cornerRadius(12)
                    .shadow(color: .black.opacity(0.1), radius: 5)
                    
                } else {
                    // Start screen - content without duplicate header
                    VStack(spacing: 20) {
                        
                        VStack(spacing: 15) {
                            Text("Deze sessie bevat \(brewingSteps.count) stappen:")
                                .font(.headline)
                            
                            ScrollView {
                                LazyVStack(spacing: 8) {
                                    ForEach(0..<brewingSteps.count, id: \.self) { index in
                                        HStack {
                                            Text("\(index + 1).")
                                                .fontWeight(.medium)
                                                .frame(width: 25, alignment: .leading)
                                            
                                            VStack(alignment: .leading, spacing: 2) {
                                                Text(brewingSteps[index].name)
                                                
                                                if brewingSteps[index].requiresTemperature {
                                                    HStack {
                                                        Image(systemName: "thermometer")
                                                            .foregroundColor(.orange)
                                                        Text(brewingSteps[index].targetTemperature)
                                                    }
                                                    .font(.caption)
                                                    .foregroundColor(.secondary)
                                                }
                                            }
                                            
                                            Spacer()
                                            
                                            HStack(spacing: 4) {
                                                if brewingSteps[index].requiresTemperature {
                                                    Image(systemName: "thermometer")
                                                        .foregroundColor(.orange)
                                                        .font(.caption)
                                                }
                                                
                                                if brewingSteps[index].duration > 0 {
                                                    Text("\(brewingSteps[index].duration) min")
                                                        .font(.caption)
                                                        .foregroundColor(.secondary)
                                                }
                                            }
                                        }
                                        .padding(.horizontal)
                                        .padding(.vertical, 2)
                                    }
                                }
                            }
                            .frame(maxHeight: 200)
                            .background(Color(.systemGray6))
                            .cornerRadius(10)
                        }
                        
                        Button("Start Nieuwe Brouwsessie") {
                            startSession()
                        }
                        .buttonStyle(.borderedProminent)
                        .controlSize(.large)
                    }
                }
                
                Spacer()
            }
            .padding()
            .navigationBarHidden(true)
            .sheet(isPresented: $showingStepDetail) {
                StepDetailView(step: brewingSteps[currentStep])
            }
            .sheet(isPresented: $showingDataEntry) {
                // TODO: Implement DataEntryView
                VStack(spacing: 20) {
                    Text("Data Entry")
                        .font(.title2)
                        .fontWeight(.bold)
                    Text("Deze functie wordt binnenkort toegevoegd")
                        .font(.body)
                        .foregroundColor(.secondary)
                    Button("Sluiten") {
                        showingDataEntry = false
                    }
                    .buttonStyle(.borderedProminent)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
                .background(Color(.systemBackground))
            }
        }
    }
    
    private func startSession() {
        isBrewingActive = true
        currentStep = 0
        elapsedTime = 0
        brewStartTime = Date()
    }
    
    private func endSession() {
        isBrewingActive = false
        stopTimer()
        currentStep = 0
        elapsedTime = 0
    }
    
    private func toggleTimer() {
        if isTimerRunning {
            stopTimer()
        } else {
            startTimer()
        }
    }
    
    private func startTimer() {
        isTimerRunning = true
        stepTimer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { _ in
            elapsedTime += 1
        }
    }
    
    private func stopTimer() {
        isTimerRunning = false
        stepTimer?.invalidate()
        stepTimer = nil
    }
    
    private func resetTimer() {
        stopTimer()
        elapsedTime = 0
    }
    
    private func nextStep() {
        if currentStep < brewingSteps.count - 1 {
            currentStep += 1
            resetTimer()
        }
    }
    
    private func previousStep() {
        if currentStep > 0 {
            currentStep -= 1
            resetTimer()
        }
    }
    
    private func formatTime(_ seconds: Int) -> String {
        let hours = seconds / 3600
        let minutes = (seconds % 3600) / 60
        let secs = seconds % 60
        
        if hours > 0 {
            return String(format: "%d:%02d:%02d", hours, minutes, secs)
        } else {
            return String(format: "%02d:%02d", minutes, secs)
        }
    }
    
    private func hasDataForCurrentStep() -> Bool {
        return !currentTemperature.isEmpty || !currentNotes.isEmpty || !currentGravity.isEmpty
    }
    
    private func generateBrewingSteps(from recipe: DetailedRecipe?) -> [BrewStep] {
        // Return the default brewing steps since recipe-specific step generation
        // is handled in EnhancedBrewingView
        return defaultBrewingSteps
    }
}

// MARK: - Legacy Water Profile for Water Calculator (to avoid conflicts)
struct LegacyWaterProfile {
    var name: String = "Custom"
    var description: String = "Custom water profile"
    var calcium: Double = 20
    var magnesium: Double = 5
    var sulfate: Double = 15
    var chloride: Double = 10
    var bicarbonate: Double = 50
    var sodium: Double = 8
    var estimatedPH: Double = 7.0
    
    var sulfateToChlorideRatio: Double {
        return chloride > 0 ? sulfate / chloride : sulfate
    }
    
    static let pilsner = LegacyWaterProfile(
        name: "Pilsner",
        description: "Zacht, laag mineraal",
        calcium: 50,
        magnesium: 10,
        sulfate: 25,
        chloride: 15,
        bicarbonate: 20,
        sodium: 5,
        estimatedPH: 5.3
    )
    
    static let ipa = LegacyWaterProfile(
        name: "IPA",
        description: "Hoog sulfaat, hoppy",
        calcium: 200,
        magnesium: 15,
        sulfate: 350,
        chloride: 75,
        bicarbonate: 30,
        sodium: 10,
        estimatedPH: 5.4
    )
    
    static let stout = LegacyWaterProfile(
        name: "Stout",
        description: "Hoog chloride, malty",
        calcium: 150,
        magnesium: 25,
        sulfate: 75,
        chloride: 200,
        bicarbonate: 150,
        sodium: 15,
        estimatedPH: 5.6
    )
    
    static let balanced = LegacyWaterProfile(
        name: "Balanced",
        description: "Universeel profiel",
        calcium: 150,
        magnesium: 15,
        sulfate: 150,
        chloride: 100,
        bicarbonate: 75,
        sodium: 10,
        estimatedPH: 5.5
    )
    
    static let amsterdam = LegacyWaterProfile(
        name: "Amsterdam",
        description: "Lokaal water profiel",
        calcium: 65,
        magnesium: 15,
        sulfate: 45,
        chloride: 85,
        bicarbonate: 120,
        sodium: 25,
        estimatedPH: 7.2
    )
    
    static let ro = LegacyWaterProfile(
        name: "RO Water",
        description: "Reverse osmosis",
        calcium: 0,
        magnesium: 0,
        sulfate: 0,
        chloride: 0,
        bicarbonate: 0,
        sodium: 0,
        estimatedPH: 7.0
    )
    
    static let distilled = LegacyWaterProfile(
        name: "Distilled",
        description: "Gedestilleerd water",
        calcium: 0,
        magnesium: 0,
        sulfate: 0,
        chloride: 0,
        bicarbonate: 0,
        sodium: 0,
        estimatedPH: 7.0
    )
    
    static let knownProfiles: [LegacyWaterProfile] = [
        .pilsner, .ipa, .stout, .balanced
    ]
}

struct WaterAddition {
    var salt: WaterSalt
    var amount: Double // grams
}

struct SaltAddition {
    let name: String
    let description: String
    let amount: Double
}

enum WaterSalt: String, CaseIterable {
    case gypsum = "Gypsum (CaSO‚ÇÑ)"
    case calciumChloride = "Calcium Chloride (CaCl‚ÇÇ)"
    case epsomSalt = "Epsom Salt (MgSO‚ÇÑ)"
    case bakingSoda = "Baking Soda (NaHCO‚ÇÉ)"
    case salt = "Salt (NaCl)"
    
    var description: String {
        switch self {
        case .gypsum: return "Verhoogt Ca¬≤‚Å∫ en SO‚ÇÑ¬≤‚Åª"
        case .calciumChloride: return "Verhoogt Ca¬≤‚Å∫ en Cl‚Åª"
        case .epsomSalt: return "Verhoogt Mg¬≤‚Å∫ en SO‚ÇÑ¬≤‚Åª"
        case .bakingSoda: return "Verhoogt Na‚Å∫ en HCO‚ÇÉ‚Åª"
        case .salt: return "Verhoogt Na‚Å∫ en Cl‚Åª"
        }
    }
}

#Preview {
    MainTabView()
        .environment(\.managedObjectContext, PersistenceController.preview.container.viewContext)
}